// Test script ƒë·ªÉ ki·ªÉm tra parsing xaycon.live c·ª• th·ªÉ
console.log('üîç Testing Xaycon.live Specific Parsing...\n');

async function testXayconParsing() {
    const API_BASE = 'http://localhost:3000/api';
    const fetch = require('node-fetch');
    
    try {
        // Test debug endpoint
        console.log('üìä Fetching debug information...');
        const debugResponse = await fetch(`${API_BASE}/debug`);
        const debugData = await debugResponse.json();
        
        console.log(`‚úÖ Total matches found: ${debugData.totalMatches}`);
        console.log(`üìà Source breakdown:`, debugData.sourceCounts);
        console.log('');
        
        // Analyze xaycon-specific matches
        const xayconMatches = debugData.allMatches.filter(m => m.source === 'xaycon-specific');
        const genericMatches = debugData.allMatches.filter(m => m.source === 'generic');
        
        console.log(`üéØ Xaycon-specific matches: ${xayconMatches.length}`);
        console.log(`üîÑ Generic matches: ${genericMatches.length}`);
        console.log('');
        
        // Show sample xaycon matches
        if (xayconMatches.length > 0) {
            console.log('üèÜ Sample Xaycon-specific matches:');
            xayconMatches.slice(0, 3).forEach((match, index) => {
                console.log(`\n${index + 1}. ${match.teams}`);
                console.log(`   üìÖ Date: ${match.date || 'N/A'}`);
                console.log(`   ‚è∞ Time: ${match.timeOnly || 'N/A'}`);
                console.log(`   üèÜ League: ${match.league || 'N/A'}`);
                console.log(`   üìä Status: ${match.status || 'N/A'}`);
                console.log(`   üìù Raw preview: ${match.rawTextPreview}`);
            });
        } else {
            console.log('‚ùå No xaycon-specific matches found!');
            console.log('üîß The HTML structure might have changed or selectors need adjustment.');
        }
        
        // Show sample generic matches
        if (genericMatches.length > 0) {
            console.log('\nüîÑ Sample Generic matches:');
            genericMatches.slice(0, 2).forEach((match, index) => {
                console.log(`\n${index + 1}. ${match.teams}`);
                console.log(`   üìÖ Date: ${match.date || 'N/A'}`);
                console.log(`   ‚è∞ Time: ${match.timeOnly || 'N/A'}`);
                console.log(`   üèÜ League: ${match.league || 'N/A'}`);
                console.log(`   üìä Status: ${match.status || 'N/A'}`);
            });
        }
        
        // Test live matches
        console.log('\nüî¥ Testing live matches...');
        const liveResponse = await fetch(`${API_BASE}/matches/live`);
        const liveData = await liveResponse.json();
        console.log(`‚úÖ Live matches found: ${liveData.totalMatches}`);
        
        if (liveData.data.length > 0) {
            liveData.data.forEach((match, index) => {
                console.log(`${index + 1}. ${match.homeTeam} vs ${match.awayTeam} - ${match.status}`);
            });
        }
        
        // Test today's matches
        console.log('\nüìÖ Testing today\'s matches...');
        const todayResponse = await fetch(`${API_BASE}/matches/today`);
        const todayData = await todayResponse.json();
        console.log(`‚úÖ Today's matches found: ${todayData.totalMatches}`);
        
        // Summary
        console.log('\nüìã Summary:');
        console.log(`‚Ä¢ Total matches: ${debugData.totalMatches}`);
        console.log(`‚Ä¢ Xaycon-specific: ${xayconMatches.length}`);
        console.log(`‚Ä¢ Generic: ${genericMatches.length}`);
        console.log(`‚Ä¢ Live matches: ${liveData.totalMatches}`);
        console.log(`‚Ä¢ Today's matches: ${todayData.totalMatches}`);
        
        if (xayconMatches.length === 0) {
            console.log('\n‚ö†Ô∏è  Warning: No xaycon-specific matches detected!');
            console.log('This might indicate:');
            console.log('1. The HTML structure has changed');
            console.log('2. CSS classes are different');
            console.log('3. JavaScript takes longer to render');
            console.log('4. Need to adjust selectors');
        }
        
    } catch (error) {
        console.error('‚ùå Error testing xaycon parsing:', error);
    }
}

// For Node.js environment
if (typeof window === 'undefined') {
    const fetch = require('node-fetch');
    testXayconParsing();
}